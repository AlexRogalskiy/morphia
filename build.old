buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        maven { url "https://plugins.gradle.org/m2/" }
        mavenLocal()
    }
    dependencies {
        classpath 'org.kordamp.gradle:clirr-gradle-plugin:0.2.5'
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:3.0.3'
        classpath 'gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.6.4'
    }
}

ext {
    configDir = new File(rootDir, 'config')
    majorVersion = major(version)
    latest = isSnapshotBranch() ? version : latest_release
    gitVersion = getGitVersion()
}

def configDir = ext.configDir
def coreProjects = subprojects.findAll { !['util'].contains(it.name) }
def javaProjects = subprojects
def javaMainProjects = subprojects.findAll { !['util'].contains(it.name) }
def javaCodeCheckedProjects = subprojects.findAll { !['util', 'no-proxy-dep-tests'].contains(it.name) }

configure(coreProjects) {
    evaluationDependsOn(':util')
    group = 'dev.morphia'

    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        google()
        mavenLocal()
    }
}

configure(javaProjects) {
    apply plugin: 'java-library'

    sourceCompatibility = JavaVersion.VERSION_1_6
    targetCompatibility = JavaVersion.VERSION_1_6

    dependencies {
        compile files("${System.getProperty('java.home')}/../lib/tools.jar")
    }
}

configure(javaMainProjects) {
    apply plugin: 'idea'
    apply plugin: 'osgi'
    apply plugin: 'nebula.optional-base'

    dependencies {
        compile 'org.slf4j:slf4j-api:1.7.6', optional
    }

    tasks.withType(AbstractCompile) {
        options.encoding = 'ISO-8859-1'
        options.fork = true
        options.debug = true
        options.compilerArgs = ['-Xlint:all', '-Xlint:-options', '-Xlint:-deprecation']
    }
}

configure(javaCodeCheckedProjects) {
    apply plugin: 'checkstyle'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'org.kordamp.gradle.clirr'
    apply plugin: 'jacoco'
    apply plugin: 'codenarc'

    dependencies {
        testCompile 'org.spockframework:spock-core:1.1-groovy-2.4'
        testCompile 'cglib:cglib-nodep:2.2.2'
        testCompile 'org.hamcrest:hamcrest-all:1.3'
        testCompile 'ch.qos.logback:logback-classic:1.1.1'
        testCompile project(':util') //Adding categories to classpath
    }

    task quickCheck(dependsOn: ['checkstyleMain', 'checkstyleTest', 'spotbugsMain']) {}

    tasks.withType(Test) {
        maxHeapSize = "3g"
        maxParallelForks = 1

        project.ext.buildingWith = { propertyName ->
            project.hasProperty(propertyName) && project.property(propertyName).toBoolean()
        }

        useJUnit {
            if (!project.buildingWith('rs.enabled')) {
                excludeCategories 'category.ReplicaSet'
            }
            if (project.buildingWith('quicktest')) {
                excludeCategories 'category.SlowUnit'
            }
            if (project.buildingWith('travistest')) {
                excludeCategories 'category.SlowUnit', 'category.Slow'
            }
        }

        jacoco { enabled = false }

        testLogging { exceptionFormat = 'full' }
    }

    gradle.taskGraph.whenReady { taskGraph ->
        if (taskGraph.hasTask(testCoverage)) {
            tasks.withType(Test) { jacoco { enabled = true } }
        }
    }

    task testCoverage(dependsOn: test)

    /* Code quality */
    tasks.withType(Checkstyle) {
        reports {
            xml.enabled true
            html.enabled true
        }
    }

    checkstyle {
        toolVersion = "7.4"
        configFile = new File(configDir, 'checkstyle.xml')
        configProperties.checkstyleConfigDir = configDir
    }

    spotbugs {
        excludeFilter = new File(configDir, 'findbugs-exclude.xml')
        sourceSets = [sourceSets.main]
        toolVersion = '3.1.7'
    }

    codenarc {
        toolVersion = '1.1'
        reportFormat = project.buildingWith('xmlReports.enabled') ? 'xml' : 'html'
    }

    tasks.withType(com.github.spotbugs.SpotBugsTask) {
        reports {
            xml.enabled = project.buildingWith('xmlReports.enabled')
            html.enabled = !project.buildingWith('xmlReports.enabled')
        }
    }

    tasks.withType(Test) {
        def jdkHome = findProperty("jdkHome")
        if (jdkHome) {
            def javaExecutablesPath = new File(jdkHome, 'bin')
            def javaExecutables = [:].withDefault { execName ->
                def executable = new File(javaExecutablesPath, execName)
                assert executable.exists() : "There is no ${execName} executable in ${javaExecutablesPath}"
                executable
            }
            executable = javaExecutables.java
        }
    }
}

def getGitVersion() {
    def describeStdOut = new ByteArrayOutputStream()
    exec {
        commandLine 'git', "rev-parse", "--abbrev-ref", "HEAD"
        standardOutput = describeStdOut
    }
    describeStdOut.toString().trim()
}

apply from: 'gradle/publish.gradle'
apply from: 'gradle/deploy.gradle'
apply from: 'gradle/javadoc.gradle'
apply from: 'gradle/testColorOutput.gradle'
apply from: 'gradle/docs.gradle'
apply from: 'gradle/release-process.gradle'

task wrapper(type: Wrapper) {
    gradleVersion = '4.10.2'
}

def major(fullVersion) {
    fullVersion.split('\\.').dropRight(1).join('.') +
        (isSnapshotBranch() && fullVersion.contains('-SNAPSHOT') ? '-SNAPSHOT' : '')
}

private boolean isSnapshotBranch() {
    String name = getGitVersion()
    name == 'master' || name == 'mapper'
}
