<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Morphia</title>
    <link>/2.0.0-BETA2/</link>
    <description>Recent content on Morphia</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Mar 2015 15:36:56 +0000</lastBuildDate>
    
	<atom:link href="/2.0.0-BETA2/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Issues &amp; Help</title>
      <link>/2.0.0-BETA2/issues-help/</link>
      <pubDate>Wed, 18 Mar 2015 16:56:14 +0000</pubDate>
      
      <guid>/2.0.0-BETA2/issues-help/</guid>
      <description>Issues &amp;amp; Help We are lucky to have a vibrant MongoDB Java community with lots of varying experience of using Morphia. We often find the quickest way to get support for general questions is through the Morphia google group, mongodb-user google group, or through stackoverflow. Please also refer to our own support channels documentation. If you have a question or think you&amp;rsquo;ve encountered a bug, the mailing list is the place to start.</description>
    </item>
    
    <item>
      <title>Annotations</title>
      <link>/2.0.0-BETA2/guides/annotations/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/2.0.0-BETA2/guides/annotations/</guid>
      <description>Below is a list of all the annotations and a brief description of how to use them.
Indexes Indexes can be defined on each field directly for single field indexing or at the class level for compund indexes. To see the next few annotations in context, please refer to TestIndexCollections.java or TestIndexed.java in the Morphia source.
Index The @Index documentation can be found here. There are two pieces to this annotation that are mutually exclusive.</description>
    </item>
    
    <item>
      <title>Installation Guide</title>
      <link>/2.0.0-BETA2/getting-started/installation-guide/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/2.0.0-BETA2/getting-started/installation-guide/</guid>
      <description>The recommended way to get started using Morphia in your project is with a dependency management system such as maven or gradle. To use Morphia using either build tool, you will need to update your build configurations with the following information.
 &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;dev.morphia.morphia&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;morphia-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.0.0-BETA2&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt;    dependencies { compile &#39;dev.morphia.morphia:morphia-core:2.0.0-BETA2&#39; }   You can also download the jars directly from sonatype.  </description>
    </item>
    
    <item>
      <title>Quick Tour</title>
      <link>/2.0.0-BETA2/getting-started/quick-tour/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/2.0.0-BETA2/getting-started/quick-tour/</guid>
      <description>Morphia wraps the MongoDB Java driver so some level of familiarity with using the driver can be helpful. Morphia does its best to abstract much of that away but if something is confusing, please consult the Java driver documentation as well.
The following code snippets come from the QuickTour.java example code that can be found with the Morphia source.
Setting up Morphia The following example shows how to create the initial Morphia instance.</description>
    </item>
    
    <item>
      <title>Aggregation</title>
      <link>/2.0.0-BETA2/guides/aggregation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/2.0.0-BETA2/guides/aggregation/</guid>
      <description>The aggregation framework in MongoDB allows you to define a series (called a pipeline) of operations (called stages) against the data in a collection. These pipelines can be used for analytics or they can be used to convert your data from one form to another. This guide will not go in to the details of how aggregation works, however. The official MongoDB documentation has extensive tutorials on such details. Rather, this guide will focus on the Morphia API.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>/2.0.0-BETA2/guides/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/2.0.0-BETA2/guides/configuration/</guid>
      <description>Morphia 2.0 introduces a number of new ways to configure its behavior. These values are listed below:
 Collection naming Property naming The discriminator key The discriminator value  Collection and property naming Traditionally Morphia has used with the class&amp;rsquo;s &amp;ldquo;simple name&amp;rdquo; for the collection name if you choose to not manually map the name of an entity&amp;rsquo;s collection. Similarly, an entity&amp;rsquo;s properties were named after the Java field name unless mapped otherwise with the @Property annotation.</description>
    </item>
    
    <item>
      <title>Indexing</title>
      <link>/2.0.0-BETA2/guides/indexing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/2.0.0-BETA2/guides/indexing/</guid>
      <description>Morphia provides annotations that allow developers to define indexes for a collection to be defined alongside the other mapping data on an entity&amp;rsquo;s source. In addition to the familiar ascending/descending index types, Morphia and MongoDB support TTL, text, and geospatial indexes. When defining text indexes there are certain restrictions which will be covered below. Full details for all these types are available in the manual.
There are two ways to define indexes: at the class level and at the field level.</description>
    </item>
    
    <item>
      <title>Life Cycle Methods</title>
      <link>/2.0.0-BETA2/guides/lifecyclemethods/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/2.0.0-BETA2/guides/lifecyclemethods/</guid>
      <description>There are various annotations which can be used to register callbacks on certain life cycle events. These include Pre/Post-Persist (Save) , and Pre/Post-Load.
 @PrePersist - Called before save, it can return a Document in place of an empty one. @PostPersist - Called after the save call to the database @PreLoad - Called before mapping the document from the database to the entity; the Document is passed as an argument (you can add/remove/change values) @PostLoad - Called after populating the entity with the values from the document  See the annotations guide for a full list of the annotations supported.</description>
    </item>
    
    <item>
      <title>Querying</title>
      <link>/2.0.0-BETA2/guides/querying/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/2.0.0-BETA2/guides/querying/</guid>
      <description>Creating a Query Morphia provides Query&amp;lt;T&amp;gt; class to build a query and map the results back to instances of your entity classes and attempts to provide as much type safety and validation as possible. To create the Query, we invoke the following code:
Query&amp;lt;Product&amp;gt; query = datastore.find(Product.class); find() returns an instance of Query which we can use to build a query.
filter() The most significant method filter(Filter...). This method takes a number of filters to apply to the query being built.</description>
    </item>
    
    <item>
      <title>Querying (Deprecated)</title>
      <link>/2.0.0-BETA2/guides/querying-old/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/2.0.0-BETA2/guides/querying-old/</guid>
      <description>This page describes the older approach to querying. While this older API is still supported, efforts should be made to update to the new API as outlined in the other querying guide. This old API is active using the legacy. The new API will attempt to redirect most calls to use the new Filters based approach.
Note that at this time complex queries using and or or clauses can not be correctly transparently translated and will require manual effort to update to the new API.</description>
    </item>
    
    <item>
      <title>References</title>
      <link>/2.0.0-BETA2/guides/references/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/2.0.0-BETA2/guides/references/</guid>
      <description>Morphia supports two styles of defining references: the @Reference annotation and the experimental MorphiaReference. The annotation based approach is discussed here. This guide will cover the wrapper based approach.
This API is experimental. Its implementation and API subject to change based on user feedback. However, users are encouraged to experiment with the API and provide as much feedback as possible both positive and negative as this will likely be the approach used going forward.</description>
    </item>
    
    <item>
      <title>Schema Validation</title>
      <link>/2.0.0-BETA2/guides/schemavalidation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/2.0.0-BETA2/guides/schemavalidation/</guid>
      <description>Morphia provides annotations that allow developers to define document validations for a collection to be defined alongside the other mapping data on an entity&amp;rsquo;s source. Schema validationprovides the capability to perform schema validation during updates and insertions. Validation rules are on a per-collection basis and can be defined via annotations just like indexes are.
Below we have a basic entity definition. Note the new annotation @Validation.
@Entity(&amp;#34;validation&amp;#34;) @Validation(&amp;#34;{ number : { $gt : 10 } }&amp;#34;) public class DocumentValidation { @Id private ObjectId id; private String string; private int number; private Date date; .</description>
    </item>
    
    <item>
      <title>Text Search</title>
      <link>/2.0.0-BETA2/guides/textsearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/2.0.0-BETA2/guides/textsearch/</guid>
      <description>Text Searching Morphia also supports MongoDB&amp;rsquo;s text search capabilities. In order to execute a text search against a collection, the collection must have a text index defined first. Using Morphia that definition would look like this:
@Indexes(@Index(fields = @Field(value = &amp;#34;$**&amp;#34;, type = IndexType.TEXT))) public static class Greeting { @Id private ObjectId id; private String value; private String language; ... } The $** value tells MongoDB to create a text index on all the text fields in a document.</description>
    </item>
    
    <item>
      <title>Transactions</title>
      <link>/2.0.0-BETA2/guides/transactions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/2.0.0-BETA2/guides/transactions/</guid>
      <description>Starting with MongoDB version 4.0, multi-document transactions are now supported on replica sets. Morphia 2.0 introduces a simple mechanism to access this functionality. Morphia 2.0 adds the methods withTransaction(MorphiaTransaction&amp;lt;T&amp;gt; transaction) and withTransaction(ClientSessionOptions options, MorphiaTransaction&amp;lt;T&amp;gt; transaction) allowing for the execution of logic scoped to a transaction.
The API is designed to work with Java 8&amp;rsquo;s lambda syntax for the most convenience. In this example, let&amp;rsquo;s assume we&amp;rsquo;re building a shopping site.</description>
    </item>
    
    <item>
      <title>Updating</title>
      <link>/2.0.0-BETA2/guides/updating/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/2.0.0-BETA2/guides/updating/</guid>
      <description>There are two basic ways to update your data: insert/save a whole Entity or issue an update operation.
Updating (on the server) The update method on Datastore is used to issue a command to the server to change existing documents. The effects of the update command are defined via UpdateOperations methods.
The Field Expression The field expression, used by all update operations, can be either a single field name or any dot-notation form (for embedded elements).</description>
    </item>
    
    <item>
      <title>Validation Extension</title>
      <link>/2.0.0-BETA2/guides/validationextension/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/2.0.0-BETA2/guides/validationextension/</guid>
      <description>This is a simple extension to Morphia to process JSR 303 Validation Annotations.
Using Add this at the start of your application (or wherever you create your morphia instances).
new ValidationExtension(morphia); Example Here is a simple example using (as an example) Hibernate validation:
... import org.hibernate.validator.constraints.Email; ... @Entity public class Userlike { @Id ObjectId id; @Email String email; } Implementation This is a lightweight wrapper around the JSR 303 API. It installs a simple global entity interceptor which listens to all life cycle methods needed for validation.</description>
    </item>
    
  </channel>
</rss>